package org.metadatacenter.cedar.cli;

import org.metadatacenter.cedar.api.CedarArtifactStatus;
import org.metadatacenter.cedar.api.CedarTemplateField;
import org.metadatacenter.cedar.api.ModelVersion;
import org.metadatacenter.cedar.csv.CedarCsvParserFactory;
import org.metadatacenter.cedar.io.TemplateFieldCedarImporter;
import org.springframework.stereotype.Component;
import picocli.CommandLine;
import picocli.CommandLine.ArgGroup;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Instant;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Matthew Horridge
 * Stanford Center for Biomedical Informatics Research
 * 2022-07-29
 */
@Component
@Command(name = "csv2artifacts",
        description = "Generate CEDAR artifacts from a Comma Separated Values (CSV) file.  Artifacts are generated as CEDAR JSON-LD and are output as a set of JSON files.  Artifacts can also pushed directly into CEDAR.")
public class Csv2ArtifactsCommand implements CedarCliCommand {

    @Option(names = "--in", required = true, description = "A path to a CSV file that conforms to the CEDAR CSV format")
    Path inputCsvFile;

    @Option(names = "--out", required = true, description = "A path to a directory where JSON+LD CEDAR template fields will be written to")
    Path outputDirectory;

    @Option(names = "--json-schema-title",
            description = "A string that will be inserted into the JSON-Schema 'title' property of all generated CEDAR artifacts.")
    String jsonSchemaTitle;

    @Option(names = "--json-schema-description", description = "A string that will be inserted into the JSON-Schema 'description' property of all generated CEDAR artifact objects.", defaultValue = "Generated by CSV2CEDAR.")
    String jsonSchemaDescription;

    @Option(names = "--artifact-status",
            description = "Specifies the status of the artifacts that are generated.  Valid values are ${COMPLETION-CANDIDATES}",
            defaultValue = "DRAFT",
            showDefaultValue = CommandLine.Help.Visibility.ALWAYS)
    CedarArtifactStatus artifactStatus;

    @Option(names = "--artifact-version",
            required = true,
            description = "A string in the format major.minor.patch that specifies the version number for generatated artifacts")
    String version;


    @Option(names = "--artifact-previous-version", defaultValue = "", hidden = true)
    public String previousVersion;

    @ArgGroup(exclusive = false,
            heading = "CEDAR Connection Details")
    public PushToCedarOptions pushToCedar;

    private final TemplateFieldCedarImporter importer;

    private final CedarCsvParserFactory cedarCsvParserFactory;

    private final CliCedarArtifactWriter writer;

    public Csv2ArtifactsCommand(TemplateFieldCedarImporter importer,
                                CedarCsvParserFactory cedarCsvParserFactory,
                                CliCedarArtifactWriter writer) {
        this.importer = importer;
        this.cedarCsvParserFactory = cedarCsvParserFactory;
        this.writer = writer;
    }

    @Override
    public Integer call() throws Exception {
        if(jsonSchemaDescription == null) {
            jsonSchemaDescription = "Generated from " + inputCsvFile.getFileName().toString() + " by CEDAR-CSV on " + Instant.now();
        }
        if(inputCsvFile == null) {
            System.err.println("Input file not specified");
        }
        if(!Files.exists(inputCsvFile)) {
            System.err.println("Input file " + inputCsvFile + " does not exist");
            System.exit(1);
        }
        if(version == null) {
            version = "1.0.0";
        }
        if(!Files.exists(outputDirectory)) {
            Files.createDirectories(outputDirectory);
        }
        var inputStream = Files.newInputStream(inputCsvFile);
        var cedarCsvParser = cedarCsvParserFactory.createParser(artifactStatus,
                                                                version, previousVersion, ModelVersion.V1_6_0);
        var template = cedarCsvParser.parse(inputStream);
        var fields = template.getFields();
        var counter = new AtomicInteger();
        fields.forEach(this::writeCedarField);
        if(pushToCedar != null && pushToCedar.pushToCedar) {
            fields.forEach(f -> {
                try {
                    importer.postToCedar(f, pushToCedar.getCedarFolderId(),
                                         pushToCedar.getCedarApiKey(),
                                         f.toCompactString(), jsonSchemaDescription);
                    counter.incrementAndGet();
                    System.err.printf("Posted %d of %d fields to CEDAR\n", counter.get(), fields.size());
                } catch (IOException | InterruptedException e) {
                    System.err.println(e.getMessage());
                }
            });
        }
        return 0;
    }

    private void writeCedarField(CedarTemplateField f) {
        try {
            var jsonSchemaTitle = f.toCompactString();
            writer.writeCedarArtifact(f, outputDirectory, jsonSchemaTitle, jsonSchemaDescription);
        } catch (IOException e) {
            System.err.println("Could not write field " + e.getMessage());
        }
    }
}

package org.metadatacenter.cedar.artifactLib;

import org.metadatacenter.artifacts.model.core.FieldSchemaArtifact;
import org.metadatacenter.artifacts.model.core.Status;
import org.metadatacenter.artifacts.model.core.TemplateSchemaArtifact;
import org.metadatacenter.artifacts.model.core.Version;
import org.metadatacenter.cedar.api.ArtifactStatus;
import org.metadatacenter.cedar.api.CedarId;
import org.metadatacenter.cedar.csv.CedarCsvParser;
import org.springframework.stereotype.Component;

import java.net.URI;
import java.util.UUID;

@Component
public class TemplateGenerator {
  private FieldGeneratorFactory fieldGeneratorFactory;
  private ElementGenerator elementGenerator;

  public TemplateGenerator(FieldGeneratorFactory fieldGeneratorFactory, ElementGenerator elementGenerator) {
    this.fieldGeneratorFactory = fieldGeneratorFactory;
    this.elementGenerator = elementGenerator;
  }

  public TemplateSchemaArtifact generateTemplateSchemaArtifact(CedarCsvParser.Node rootnode,
                                                               String templateIdentifier,
                                                               String templateName,
                                                               String version,
                                                               String previousVersion,
                                                               String artifactStatus,
                                                               String elementName){
    var templateSchemaArtifactBuilder = TemplateSchemaArtifact.builder();
    var jsonLdId = CedarId.resolveTemplateId(UUID.randomUUID().toString());

    for(var child : rootnode.getChildNodes()){
      if(child.isElement()){
        var elementSchemaArtifact = elementGenerator.generateElementSchemaArtifact(child, null, null);
        templateSchemaArtifactBuilder.withElementSchema(elementSchemaArtifact);
      } else if (child.isIdentifyElement()) {
        var elementSchemaArtifact = elementGenerator.generateIdentifierElement(child, null, null);
        templateSchemaArtifactBuilder.withElementSchema(elementSchemaArtifact);
      } else if (child.isIdentifierField()) {
        //build with identifier field
        var fieldSchemaArtifact = fieldGeneratorFactory.generateFieldSchemaArtifact(child);
        templateSchemaArtifactBuilder.withFieldSchema(fieldSchemaArtifact);
        //build with identifier scheme field
        var controlledTermFieldGenerator = new ControlledTermFieldGenerator();
        var identifierSchemeArtifact = controlledTermFieldGenerator.generateIdentifierSchemeFieldArtifactSchema(child);
        templateSchemaArtifactBuilder.withFieldSchema(identifierSchemeArtifact);
      } else if (child.isField()) {
        var fieldSchemaArtifact = generateFieldSchemaArtifact(child);
        templateSchemaArtifactBuilder.withFieldSchema(fieldSchemaArtifact);
      }
    }

    if(templateIdentifier != null && !templateIdentifier.equals("")){
      templateSchemaArtifactBuilder.withIdentifier(templateIdentifier);
    }
    if(templateName != null && !templateName.equals("")){
      templateSchemaArtifactBuilder.withName(templateName);
    }
    if(version != null && !version.equals("")){
      templateSchemaArtifactBuilder.withVersion(Version.fromString(version));
    }
    if(previousVersion != null && !previousVersion.equals("")){
      templateSchemaArtifactBuilder.withPreviousVersion(URI.create(previousVersion));
    }
    if(artifactStatus != null && !artifactStatus.equals("")){
      templateSchemaArtifactBuilder.withStatus(convertStatus(artifactStatus));
    }


    return templateSchemaArtifactBuilder
        .withInternalDescription("Template generated by CEDAR CLI")
        .withJsonLdId(URI.create(jsonLdId.value()))
        .build();
  }

  private FieldSchemaArtifact generateFieldSchemaArtifact(CedarCsvParser.Node node){
    return fieldGeneratorFactory.generateFieldSchemaArtifact(node);
  }

  private Status convertStatus(String status){
    if(status.toLowerCase().equals("draft")){
      return Status.DRAFT;
    } else{
      return Status.PUBLISHED;
    }
  }
}

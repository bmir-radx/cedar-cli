package org.metadatacenter.cedar.io;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.metadatacenter.artifacts.model.core.SchemaArtifact;
import org.metadatacenter.artifacts.model.core.TemplateSchemaArtifact;
import org.metadatacenter.artifacts.model.reader.JsonSchemaArtifactReader;
import org.metadatacenter.cedar.api.*;
import org.metadatacenter.cedar.artifactLib.ArtifactRenderer;

import java.io.IOException;
import java.io.OutputStream;

/**
 * Matthew Horridge
 * Stanford Center for Biomedical Informatics Research
 * 2022-07-29
 */
public class CedarArtifactWriter {

    private final JsonMapper jsonMapper;

    public CedarArtifactWriter(JsonMapper jsonMapper) {
        this.jsonMapper = jsonMapper;
    }

    public void writeCedarArtifact(CedarArtifact cedarArtifact,
                                   String jsonSchemaDescription,
                                   OutputStream outputStream) throws IOException {
        if (cedarArtifact instanceof CedarSchemaArtifact) {
            var visitor = new ArtifactToSerializableArtifactVisitor(jsonSchemaDescription);
            var serializableArtifact = ((CedarSchemaArtifact) cedarArtifact).accept(visitor);
            jsonMapper.writerWithDefaultPrettyPrinter()
                    .writeValue(outputStream, serializableArtifact);
        }
        else {
            jsonMapper.writerWithDefaultPrettyPrinter()
                    .writeValue(outputStream, cedarArtifact);
        }
    }

    public void writeCedarArtifact(SchemaArtifact artifact,
                                     OutputStream outputStream) throws IOException {
        var artifactNode = ArtifactRenderer.renderSchemaArtifact(artifact);
        if(artifact instanceof TemplateSchemaArtifact){
            artifactNode = (ObjectNode) addPages(artifactNode);
        }
        jsonMapper.writerWithDefaultPrettyPrinter()
            .writeValue(outputStream, artifactNode);
    }

    /**
     * The JSON-LD template generated by cedar-artifact-library don't contain pages entry under _ui. But it will fail model validation in CEDAR.
     * Therefore, pages is added here as a workaround solution.
     */
    private JsonNode addPages(JsonNode artifactNode){
        var mapper = new ObjectMapper();
        if (artifactNode.has("_ui") && artifactNode.get("_ui").isObject()) {
            ObjectNode uiNode = (ObjectNode) artifactNode.get("_ui");

            // Check if "pages" entry exists, if not add an empty array
            if (!uiNode.has("pages")) {
                uiNode.set("pages", mapper.createArrayNode());
            }
        }
        return artifactNode;
    }
}

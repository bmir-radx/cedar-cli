package org.metadatacenter.cedar;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.json.JsonMapper;
import org.metadatacenter.cedar.*;
import org.metadatacenter.cedar.csv.NumericBoundParser;
import org.metadatacenter.cedar.io.CedarArtifactWriter;
import org.metadatacenter.cedar.io.TemplateFieldCedarImporter;
import org.metadatacenter.cedar.ont.ChoiceIriStrategy;
import org.metadatacenter.cedar.ont.OntologyAcronymStrategy;
import org.metadatacenter.cedar.ont.OntologyIriStrategy;
import org.metadatacenter.cedar.ont.OntologyLabelStrategy;
import org.metadatacenter.cedar.redcap.TemplateFieldGenerator;
import org.metadatacenter.cedar.redcap.TemplateFieldWriter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.inject.Named;
import java.nio.file.Path;

/**
 * Matthew Horridge
 * Stanford Center for Biomedical Informatics Research
 * 2022-06-17
 */
@Configuration
public class CedarImporterConfiguration {

    private String cedarApiKey;

    @Value("${template-field-description:Generated by the REDCap Data Dictionary to CEDAR Template tool}")
    private String templateFieldDescription;

    @Value("${values-type:CLASSES}")
    private ValuesType valuesType;

    private String outputDirectory = "";

    @Bean
    TemplateFieldWriter templateFieldWriter(TemplateFieldGenerator templateFieldGenerator) {
        return new TemplateFieldWriter(templateFieldGenerator, Path.of(outputDirectory));
    }

    @Bean
    CedarValuesStrategy cedarValuesStrategy(OntologyLabelStrategy ontologyLabelStrategy,
                                            ChoiceIriStrategy choiceIriStrategy,
                                            OntologyIriStrategy ontologyIriStrategy,
                                            OntologyAcronymStrategy ontologyAcroymnStrategy) {
        return switch (valuesType) {
            case CLASSES -> new ValuesFromClassesListStrategy(ontologyLabelStrategy, choiceIriStrategy);
            case LITERALS -> new ValuesFromLiteralsListStrategy();
            case ONTOLOGY -> new ValuesFromOntologyStrategy(ontologyIriStrategy,
                                                            ontologyAcroymnStrategy,
                                                            ontologyLabelStrategy);
        };
    }

    @Bean
    TemplateFieldGenerator templateFieldGenerator(CedarValuesStrategy valuesStrategy, NumericBoundParser numericBoundParser) {
        return new TemplateFieldGenerator(valuesStrategy, templateFieldDescription, numericBoundParser);
    }

    @Bean
    NumericBoundParser numericBoundParser() {
        return new NumericBoundParser();
    }

    @Bean
    TemplateFieldCedarImporter cedarImporter(CedarArtifactWriter artifactWriter) {
        return new TemplateFieldCedarImporter(artifactWriter);
    }

    @Bean
    @Named("outputMapper")
    JsonMapper jsonMapper() {
        var om = JsonMapper.builder()
                                   .configure(JsonGenerator.Feature.IGNORE_UNKNOWN, true)
                                   .build();
        return om;
    }

    @Bean
    CedarArtifactWriter cedarArtifactWriter(@Named("outputMapper") JsonMapper jsonMapper) {
        return new CedarArtifactWriter(jsonMapper);
    }
}
